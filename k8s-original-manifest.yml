# ---------- BACKEND MICROSERVICES ----------
# 1. -- meeton-core --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeton-core
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeton-core
  template:
    metadata:
      labels:
        app: meeton-core
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: meeton-core
          image: zorgont35/meeton-core:0.3
          env:
            - name: spring.kafka.producer.bootstrap-servers
              value: kafka:9092
            - name: spring.kafka.consumer.bootstrap-servers
              value: kafka:9092
            - name: eureka.client.serviceUrl.defaultZone
              value: http://meeton-eureka:8761/eureka/
            - name: EUREKA_INSTANCE_HOSTNAME
              value: meeton-core
            - name: spring.datasource.url
              value: jdbc:postgresql://db:5432/meeton
            - name: spring.datasource.username
              value: root
            - name: spring.datasource.password
              value: root
            - name: spring.jpa.hibernate.ddl-auto
              value: update 
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: meeton-core
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 8080
  selector:
    app: meeton-core
---
# 2. -- meeton-am --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeton-am
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeton-am
  template:
    metadata:
      labels:
        app: meeton-am
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: meeton-am
          image: zorgont35/meeton-am:0.3
          env:
            - name: spring.security.oauth2.client.registration.google.redirectUri
              value: http://api.meeton.space/oauth2/callback/{registrationId}
            - name: spring.security.oauth2.client.registration.github.redirectUri
              value: http://api.meeton.space/oauth2/callback/{registrationId}
            - name: app.meeton-ui-url
              value: http://meeton.space
            - name: spring.kafka.producer.bootstrap-servers
              value: kafka:9092
            - name: eureka.client.serviceUrl.defaultZone
              value: http://meeton-eureka:8761/eureka/
            - name: EUREKA_INSTANCE_HOSTNAME
              value: meeton-am
            - name: SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE
              value: admin
            - name: SPRING_DATA_MONGODB_AUTO_INDEX_CREATION
              value: 'true'
            - name: SPRING_DATA_MONGODB_DATABASE
              value: am-users
            - name: SPRING_DATA_MONGODB_HOST
              value: mongo 
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017"
            - name: SPRING_DATA_MONGODB_USERNAME
              value: root 
            - name: SPRING_DATA_MONGODB_PASSWORD
              value: rootpassword 
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: meeton-am
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 8081
  selector:
    app: meeton-am
---
# 3. -- meeton-nm --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeton-nm
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeton-nm
  template:
    metadata:
      labels:
        app: meeton-nm
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: meeton-nm
          image: zorgont35/meeton-nm:0.3
          env:
            - name: spring.kafka.consumer.bootstrap-servers
              value: kafka:9092
            - name: eureka.client.serviceUrl.defaultZone
              value: http://meeton-eureka:8761/eureka/
            - name: EUREKA_INSTANCE_HOSTNAME
              value: meeton-nm
            - name: SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE
              value: admin
            - name: SPRING_DATA_MONGODB_AUTO_INDEX_CREATION
              value: 'true'
            - name: SPRING_DATA_MONGODB_DATABASE
              value: nm-notification
            - name: SPRING_DATA_MONGODB_HOST
              value: mongo 
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017" 
            - name: SPRING_DATA_MONGODB_USERNAME
              value: root 
            - name: SPRING_DATA_MONGODB_PASSWORD
              value: rootpassword 
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 8082
---
apiVersion: v1
kind: Service
metadata:
  name: meeton-nm
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 8082
  selector:
    app: meeton-nm
---
# 4. -- meeton-rm --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeton-rm
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeton-rm
  template:
    metadata:
      labels:
        app: meeton-rm
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: meeton-rm
          image: zorgont35/meeton-rm:0.3
          env:
            - name: eureka.client.serviceUrl.defaultZone
              value: http://meeton-eureka:8761/eureka/
            - name: EUREKA_INSTANCE_HOSTNAME
              value: meeton-rm
            - name: SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE
              value: admin
            - name: SPRING_DATA_MONGODB_AUTO_INDEX_CREATION
              value: 'true'
            - name: SPRING_DATA_MONGODB_DATABASE
              value: rm-rating_weight
            - name: SPRING_DATA_MONGODB_HOST
              value: mongo 
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017" 
            - name: SPRING_DATA_MONGODB_USERNAME
              value: root 
            - name: SPRING_DATA_MONGODB_PASSWORD
              value: rootpassword 
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 8083
---
apiVersion: v1
kind: Service
metadata:
  name: meeton-rm
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 8083
  selector:
    app: meeton-rm
---
# 5. -- meeton-rec-manager --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeton-rec-manager
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeton-rec-manager
  template:
    metadata:
      labels:
        app: meeton-rec-manager
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: meeton-rec-manager
          image: zorgont35/meeton-rec-manager:0.3
          env:
            - name: eureka.client.serviceUrl.defaultZone
              value: http://meeton-eureka:8761/eureka/
            - name: EUREKA_INSTANCE_HOSTNAME
              value: meeton-rec-manager
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 8084
---
apiVersion: v1
kind: Service
metadata:
  name: meeton-rec-manager
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 8084
  selector:
    app: meeton-rec-manager
---

# ---------- BACKEND INFRASRUCTURE ----------
# 1. -- meeton-apg --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeton-apg
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeton-apg
  template:
    metadata:
      labels:
        app: meeton-apg
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: meeton-apg
          image: zorgont35/meeton-apg:0.3
          env:
            - name: eureka.client.serviceUrl.defaultZone
              value: http://meeton-eureka:8761/eureka/
            - name: EUREKA_INSTANCE_HOSTNAME
              value: meeton-apg
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 8989
---
apiVersion: v1
kind: Service
metadata:
  name: meeton-apg
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 8989
  selector:
    app: meeton-apg
---
# 2. -- meeton-eureka --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeton-eureka
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeton-eureka
  template:
    metadata:
      labels:
        app: meeton-eureka
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: meeton-eureka
          image: zorgont35/meeton-eureka:0.3
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 8761
---
apiVersion: v1
kind: Service
metadata:
  name: meeton-eureka
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 8761
  selector:
    app: meeton-eureka
---
# 3. -- zookeeper --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: zookeeper
          image: wurstmeister/zookeeper
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 2181
  selector:
    app: zookeeper
---
# 4. -- kafka --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: kafka
          image: wurstmeister/kafka
          env:
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: kafka
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: 'true'
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 9092
  selector:
    app: kafka
---

#---------- DATABASES ----------
# 1. -- postgres --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: db
          image: postgres:13.1-alpine
          env:
            - name: POSTGRES_USER
              value: 'root'
            - name: POSTGRES_PASSWORD
              value: 'root'
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 5432
  selector:
    app: db
---
# 2. -- mongo --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: mongo
          image: mongo:latest
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: 'root'
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: 'rootpassword'
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
          ports:
            - containerPort: 27017
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 27017
  selector:
    app: mongo
---

# ---------- UI ----------
# 1. -- React UI --
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ui
  template:
    metadata:
      labels:
        app: ui
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - name: ui
          image: zorgont35/meeton-ui:0.3
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 2Gi
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: ui
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 3000
  selector:
    app: ui
---
# ---------- INGRESS ----------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: meeton-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:    
    - host: api.meeton.space
      http: 
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: meeton-apg
                port:
                  number: 8989
    - host: meeton.space
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ui
                port:
                  number: 3000
    - host: www.meeton.space
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ui
                port:
                  number: 3000